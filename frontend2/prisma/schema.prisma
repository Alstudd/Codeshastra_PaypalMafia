// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Game          Game[]
    Teachercourse Teachercourse[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum GameType {
    mcq
    open_ended
}

model Game {
    id          String     @id @default(cuid())
    userId      String
    questions   Question[]
    timeStarted DateTime
    topic       String
    timeEnded   DateTime?
    gameType    GameType
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model topic_count {
    id    String @id @default(cuid())
    topic String @unique
    count Int
}

model Question {
    id                String   @id @default(cuid())
    question          String
    answer            String
    gameId            String
    options           Json? // for mcq questions
    percentageCorrect Float? // for open_ended questions
    isCorrect         Boolean? // for mcq questions
    questionType      GameType
    userAnswer        String?

    game      Game     @relation(fields: [gameId], references: [id])
    Chapter   Chapter? @relation(fields: [chapterId], references: [id])
    chapterId String?

    @@index([gameId])
}

model Course {
    id    String @id @default(cuid())
    name  String
    image String
    units Unit[]
}

// unit contains many chapters
model Unit {
    id       String @id @default(cuid())
    courseId String

    name     String
    course   Course    @relation(fields: [courseId], references: [id])
    chapters Chapter[]

    @@index([courseId], name: "courseId")
}

model Chapter {
    id     String @id @default(cuid())
    unitId String

    name               String
    youtubeSearchQuery String
    videoId            String?
    summary            String?    @db.VarChar(3000)
    unit               Unit       @relation(fields: [unitId], references: [id])
    questions          Question[]
    Quest              Quest[]

    @@index([unitId], name: "unitId")
}

model Quest {
    id        String @id @default(cuid())
    chapterId String

    question String  @db.VarChar(3000)
    answer   String  @db.VarChar(3000)
    options  String  @db.VarChar(3000)
    chapter  Chapter @relation(fields: [chapterId], references: [id])

    @@index([chapterId], name: "chapterId")
}

model Teacherchap {
    id String @id @default(cuid())

    name            String
    description     String?
    time            DateTime?
    summary         String?
    pro             Boolean?
    Teachercourse   Teachercourse? @relation(fields: [teachercourseId], references: [id])
    teachercourseId String?

    @@index([teachercourseId], name: "teachercourseId")
}

model Teachercourse {
    id           String        @id @default(cuid())
    userId       String
    chapters     Teacherchap[]
    title        String?
    description  String?
    price        Int?
    chapterCount Int?
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], name: "userId")
}
